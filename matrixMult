#include <iostream.h>
#include <pthread.h>

float A[m][k], B[k][n];
A[m][k] = { {0.01, 0.07, 0.06, 0.08, 0.03, 0.06, 0.00, 0.07, 0.06, 0.03, 0.03, 0.10, 0.07, 0.05, 0.05, 0.08, 0.07, 0.01, 0.08, 0.02 },
{0.11, 0.07, 0.06, 0.08, 0.10, 0.06, 0.10, 0.03, 0.03, 0.01, 0.05, 0.00, 0.04, 0.07, 0.03, 0.11, 0.07, 0.03, 0.02, 0.06 },
{0.06, 0.08, 0.06, 0.01, 0.04, 0.02, 0.12, 0.01, 0.11, 0.04, 0.03, 0.09, 0.01, 0.01, 0.02, 0.02, 0.07, 0.09, 0.08, 0.07 },
{0.03, 0.02, 0.02, 0.01, 0.00, 0.01, 0.05, 0.02, 0.09, 0.09, 0.04, 0.07, 0.06, 0.02, 0.03, 0.07, 0.00, 0.10, 0.01, 0.08 },
{0.03, 0.01, 0.06, 0.05, 0.00, 0.04, 0.04, 0.04, 0.08, 0.07, 0.07, 0.10, 0.07, 0.02, 0.08, 0.04, 0.02, 0.03, 0.05, 0.02 },
{0.07, 0.09, 0.06, 0.05, 0.01, 0.09, 0.09, 0.01, 0.07, 0.02, 0.07, 0.09, 0.08, 0.05, 0.05, 0.13, 0.08, 0.03, 0.03, 0.01 },
{0.08, 0.05, 0.06, 0.08, 0.03, 0.04, 0.04, 0.08, 0.02, 0.08, 0.01, 0.03, 0.03, 0.04, 0.04, 0.01, 0.01, 0.00, 0.05, 0.06 },
{0.07, 0.01, 0.05, 0.05, 0.09, 0.03, 0.03, 0.08, 0.02, 0.03, 0.07, 0.03, 0.01, 0.09, 0.06, 0.10, 0.10, 0.09, 0.07, 0.03 },
{0.00, 0.07, 0.07, 0.07, 0.09, 0.02, 0.06, 0.01, 0.06, 0.09, 0.06, 0.00, 0.06, 0.06, 0.01, 0.04, 0.05, 0.04, 0.04, 0.09 },
{0.01, 0.09, 0.07, 0.02, 0.04, 0.07, 0.02, 0.06, 0.03, 0.05, 0.06, 0.10, 0.09, 0.10, 0.00, 0.01, 0.05, 0.09, 0.04, 0.02 },
{0.03, 0.01, 0.07, 0.01, 0.09, 0.05, 0.01, 0.06, 0.08, 0.02, 0.04, 0.08, 0.08, 0.01, 0.00, 0.03, 0.00, 0.02, 0.03, 0.02 },
{0.01, 0.00, 0.03, 0.01, 0.06, 0.10, 0.02, 0.06, 0.08, 0.03, 0.07, 0.05, 0.02, 0.06, 0.10, 0.02, 0.09, 0.04, 0.00, 0.01 },
{0.05, 0.02, 0.06, 0.10, 0.01, 0.07, 0.06, 0.06, 0.01, 0.08, 0.06, 0.02, 0.06, 0.09, 0.08, 0.06, 0.01, 0.04, 0.06, 0.03 },
{0.06, 0.04, 0.01, 0.04, 0.09, 0.03, 0.07, 0.08, 0.08, 0.05, 0.03, 0.11, 0.04, 0.03, 0.06, 0.08, 0.03, 0.03, 0.08, 0.09 },
{0.09, 0.06, 0.01, 0.01, 0.05, 0.01, 0.07, 0.04, 0.02, 0.03, 0.06, 0.01, 0.02, 0.05, 0.06, 0.02, 0.00, 0.07, 0.08, 0.06 },
{0.08, 0.01, 0.06, 0.08, 0.03, 0.06, 0.04, 0.02, 0.00, 0.04, 0.07, 0.04, 0.02, 0.05, 0.09, 0.02, 0.09, 0.08, 0.10, 0.05 },
{0.05, 0.09, 0.05, 0.10, 0.08, 0.01, 0.01, 0.05, 0.02, 0.06, 0.06, 0.00, 0.06, 0.10, 0.01, 0.03, 0.09, 0.04, 0.02, 0.10 },
{0.02, 0.04, 0.06, 0.04, 0.03, 0.07, 0.02, 0.07, 0.03, 0.09, 0.07, 0.03, 0.04, 0.09, 0.05, 0.04, 0.03, 0.09, 0.08, 0.06 },
{0.08, 0.09, 0.03, 0.06, 0.06, 0.09, 0.06, 0.06, 0.06, 0.04, 0.04, 0.03, 0.02, 0.01, 0.07, 0.07, 0.10, 0.09, 0.02, 0.03 },
{0.07, 0.08, 0.04, 0.03, 0.06, 0.08, 0.11, 0.08, 0.06, 0.04, 0.00, 0.01, 0.09, 0.00, 0.08, 0.03, 0.04, 0.01, 0.08, 0.10 } };


B[k][n] = { {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }, 
{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };



float C[m][n];
int step=0;

#define MAX_THREAD 400
#define m 20
#define k 20
#define n 20

void* multiply(void* arg)
{

    for(int i= 0; i<(m*n);i++)
    {
        for(int j=0; j<20; j++)
        {
            for(int k=0; k<20;k++)
            {
                C[i][j]+=A[i][k]*B[k][j];
            }
        }
    }
int main()
{
    //pthread for 400 threads 
    pthread_t threads[MAX_THREAD];

    //creating threads to multiply individual elements
    for(int i=0;i<MAX_THREAD;i++)
    {
        int* p;
        pthread_create(&threads[i], NULL, multiply,(void*)(p));    
    }

    //Joining threads together after multiplication has been performed 
    for(int i=0; i<MAX_THREAD; i++)
    {
        pthread_join(threads[i],NULL);
    }

    return 0;
}
